#!/usr/bin/env bash

################################################################################

### Set bash environment error management

set -eu

### Add padding to output

echo

### Determine script execution directory, install directory, and source local functions file

exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | $exec_dir |"
		echo
        exit 1
	fi
fi

. "$exec_dir_root/functions"

### Source openspace functions file

source_os_dna

### Define formatting

dna-define_formatting

### Define variables

define_vars

################################################################################

check_root

dna-log_script

dna-read_conf_settings

################################################################################

while getopts ":s" arguments; do
    case $arguments in
		s)	skip_install_complete_check="-s"
			;;
		\?)	echo "${r-}${b-}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x-}"
			echo
			dna-exit
			;;
	esac
done
OPTIND=1

################################################################################

### Check for lockfile to avoid multiple simultaneous backups

if [ -f /tmp/${short_name}-backup-running-lockfile ]
then
    echo "${r-}${b-}It appears a ${short_name} backup is already running, perhaps an automated daily one, or perhaps the last one was interrupted.${x-}"
    echo
    echo "${b-}If this *is* an automated daily one, please check that you're not running a manual one or that the last run was interrupted.${x-}"
    echo
    echo "${b-}Running multiple simultaneous backups is absolutely not supported and will make both fail.${x-}"
    echo
    if [ $interactive = "y" ]
    then
        ask_for_boolean_question="If you're certain that another backup is NOT running, would you like to ignore the lockfile and continue?"
        dna-ask_for_boolean_def_no
        if [ "$ask_for_boolean_output" = "y" ]
        then
            echo "${b-}Ok, continuing anyway...${x-}"
            echo
            export lockfile_set="/tmp/${short_name}-backup-running-lockfile"
        else
            echo "${b-}Ok, aborting...${x-}"
            echo
            dna-exit
        fi
    else
        echo "${b-}If you're certain that another backup is NOT running, run this script manually and select to ignore the lockfile and continue when prompted.${x-}"
        echo
        echo "${b-}Alternatively, you can also log into this machine and | rm /tmp/${short_name}-backup-running-lockfile |.${x-}"
        echo
        echo "${r-}${b-}Aborting backup for now.${x-}"
        echo
        dna-exit
    fi
else
    ### set lockfile
    export lockfile_set="/tmp/${short_name}-backup-running-lockfile"
    touch $lockfile_set
fi

################################################################################

dna-br_purge_incomplete_archives

dna-br_purge_dirs

dna-br_create_dirs backup

dna-br_update_storage_info

dna-br_purge_backups

if [ "$backup_archival_location" = "s3" ]
then

    dna-br_restore_from_S3 test

    dna-br_purge_dirs

    dna-br_create_dirs backup

fi

dna-br_backup_locally "${skip_install_complete_check-}"

################################################################################

if [ "$backup_archival_location" = "s3" ]
then

    if [ "${s3_restore_test_failed-null}" = "y" ]
    then

        echo "${r-}${b-}Skipping S3 backup because of a previous test restore failure.${x-}"
        echo

        rm -r "$tmp_backup_dir"

    else

    	mv "$tmp_backup_dir"/* "$backup_local_storage_path/latest"

    	############################################################################

    	dna-br_backup_to_S3

    fi

else

	rm -r "$tmp_backup_dir"

fi

if [ -d "$backup_local_storage_path/temp" ]
then
	rm -r "${backup_local_storage_path:?}/temp"
fi

dna-br_purge_dirs

if [ -f "/tmp/${short_name}-backup-running-lockfile" ]
then
    rm /tmp/${short_name}-backup-running-lockfile
fi

if [ "${s3_restore_test_failed-null}" = "y" ]
then
    dna-exit
fi

echo "${g-}${b-}Backup complete!${x-}"
echo
